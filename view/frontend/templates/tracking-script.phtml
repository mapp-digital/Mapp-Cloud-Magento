<?php /** @var $block MappDigital\Cloud\Block\TrackingScript */ ?>
<script type="text/javascript">
    require(['jquery'<?php if ($block->getGtmEnabled()):?>, 'wtSmart'<?php endif ?>],
        function ($<?php if ($block->getGtmEnabled()):?>, wtSmart <?php endif ?>) {
            'use strict';
            <?php
            /********************************
             * WT Smart
             ********************************/
            if ($block->getGtmEnabled()):?>
            window.wtSmart = window.wtSmart ? window.wtSmart : wtSmart.use(window, window.document);
            window.wtSmart._ps && window.wtSmart._ps(64, '<?= $block::PS_VERSION ?>');
            <?php endif; ?>

            <?php
            /********************************
             * GTM
             ********************************/
            if ($block->getGtmLoad()): ?>
            (function (w, d, s, l, i) {
                w[l] = w[l] || [];
                w[l].push({
                    'gtm.start':
                        new Date().getTime(), event: 'gtm.js'
                });
                const f = d.getElementsByTagName(s)[0],
                    j = d.createElement(s), dl = l != 'dataLayer' ? '&l=' + l : '';
                j.async = true;
                j.src =
                    'https://www.googletagmanager.com/gtm.js?id=' + i + dl;
                f.parentNode.insertBefore(j, f);
            })(window, document, 'script', '<?= $block->getConfig()['gtm']['datalayer'] ?>', '<?= $block->getConfig()['gtm']['id'] ?>');
            <?php endif; ?>

            <?php
            /********************************
             * Aquire
             ********************************/
            if ($block->getAquire()): ?>
            (function (e) {
                const t = document, n = t.createElement('script');
                n.async = !0, n.defer = !0, n.src = e,
                    t.getElementsByTagName('head')[0].appendChild(n)
            })('<?= $block->getAquire() ?>');
            <?php endif ?>

            const mappEndpoint = location.protocol + '//' + location.host + '<?= $block->getStoreCode() ?>/mappintelligence/data/get/';
            const isProductView = window._ti && window._ti.pageAction && window._ti.pageAction === 'catalog_product_view';
            const calculatePrices = () => {
                const costs = window._ti.productCost.split(';');
                const quantities = window._ti.productQuantity.split(';');
                const result = [];
                if (costs && quantities) {
                    for (let i = 0; i < costs.length; i++) {
                        result.push(parseFloat(costs[i]) * parseFloat(quantities[i]));
                    }
                    window._ti.productCost = result.join(';');
                    window._ti.productPrice = window._ti.productCost;
                }
            };
            const handleAddProductKeys = (productAddDataLayer) => {
                $.each(productAddDataLayer, function (key, value) {
                    const keyBase = key.split('addProduct')[1];
                    if (keyBase) {
                        window._ti['product' + keyBase] = value;
                        delete window._ti[key];
                    }
                });
                if (window.window._ti.productCategories) {
                    if (window._ti.productCategories[0]) {
                        window._ti.productCategory = window._ti.productCategories[0];
                    }
                    if (window._ti.productCategories[1]) {
                        window._ti.productSubCategory = window._ti.productCategories[1];
                    }
                }
            }
            const restoreDataLayer = function (backup) {
                $.each(window._ti, function (key) {
                    window._ti[key] = 'false';
                });
                $.extend(window._ti, backup);
            }
            const gtmCreateProductArray = function () {
                if (window._ti.hasOwnProperty('shoppingCartStatus')) {
                    let status = 'view';
                    if (window._ti.shoppingCartStatus === 'add' || window._ti.shoppingCartStatus === 'del') {
                        status = 'basket';
                    }
                    if (window._ti.shoppingCartStatus === 'conf') {
                        status = 'confirmation';
                    }
                    const gtmProduct = {
                        id: window._ti.productId,
                        status: status,
                        cost: window._ti.productCost,
                        quantity: window._ti.productQuantity,
                        soldOut: window._ti.soldOut
                    };
                    $.each(window._ti, function (key, value) {
                        if (key !== 'gtmProductArray') {
                            gtmProduct[key] = value;
                        }
                        if ($.isArray(value)) {
                            $.each(value, function (arrKey, arrValue) {
                                gtmProduct[key + (arrKey + 1)] = arrValue;
                            })
                        }
                    });
                    window._ti.gtmProductArray = [gtmProduct];
                }
            }
            window._mappAddToCartHelper = function (conf) {
                const pixel = conf.instance.config;
                if (conf.type === 'before' && conf.mode === 'click' && pixel.productStatus === 'add') {
                    pixel.contentGroup = {};
                    pixel.customParameter = {};
                }

                if (
                    window._ti &&
                    window._ti.hasOwnProperty('addProductEntityId') &&
                    conf.type === 'before' &&
                    conf.mode === 'page' &&
                    conf.requestCounter === 1
                ) {
                    const dataLayerBackup = JSON.stringify(window._ti);
                    handleAddProductKeys(window._ti);
                    calculatePrices();
                    window._ti.shoppingCartStatus = 'add';
                    if (document.cookie.indexOf('mapp_debug') !== -1) {
                        console.log('Mapp Intelligence Add-To-Cart eventname:', window._ti.addToCartEventName);
                        console.log('Mapp Intelligence Add-To-Cart datalayer:', JSON.parse(JSON.stringify(window._ti)));
                    }
                    window.wts.push(['linkId', window._ti.addToCartEventName]);
                    window.wts.push(['send', 'pageupdate', true]);
                    setTimeout(function () {
                        window.wts.push(['linkId', 'false']);
                        restoreDataLayer(JSON.parse(dataLayerBackup));
                        window.wts.push(['send', 'pageupdate', true]);
                    }, 1000);
                    conf.instance.deactivateRequest = true;
                }
            };
            window.wts = window.wts || [];
            window.wts.push(['_mappAddToCartHelper']);
            window.dataLayer = window.dataLayer || [];
            $.ajax({
                url: mappEndpoint + (isProductView ? '?product=<?= $block->getProductId() ?>' : ''),
                type: 'GET',
                dataType: 'json',
                complete: function (response) {
                    if (window._ti) {
                        if (response.responseJSON && response.responseJSON.dataLayer) {
                            $.extend(window._ti, response.responseJSON.dataLayer);
                        }

                        if (response.responseJSON && response.responseJSON.addToWishlistMapp) {
                            window.dataLayer.push({
                                event: 'addToWishlistMapp',
                                addToWishlistMapp: JSON.parse(JSON.stringify(response.responseJSON.addToWishlistMapp))
                            });
                            if (document.cookie.indexOf('mapp_debug') !== -1) {
                                console.log('Mapp Intelligence Add-To-Wishlist datalayer:', JSON.parse(JSON.stringify(window.dataLayer)));
                            }
                        }

                        window._ti.pageName = location.host + location.pathname;
                        if (isProductView) {
                            window._ti.shoppingCartStatus = 'view';
                            window._ti.productQuantity = '1';
                        }
                        if (window._ti.productCost && window._ti.productQuantity) {
                            calculatePrices();
                        }
                        window._ti.addToCartEventName = response.responseJSON.eventName;
                    }
                    const config = response.responseJSON.config;
                    <?php
                    /********************************
                     * TI
                     ********************************/
                    if ($block->getTiEnable()): ?>
                    window._tiConfig = {
                        tiId: '<?= $block->getConfig()['tiId']?>',
                        tiDomain: '<?= $block->getConfig()['tiDomain']?>',
                        customDomain: '<?= $block->getConfig()['customDomain']?>',
                        customPath: '<?= $block->getConfig()['customPath']?>'
                    };
                    (function (c, d, a, f) {
                        c.wts = c.wts || [];
                        const g = function (b) {
                            let a = '';
                            b.customDomain && b.customPath ? a = b.customDomain + '/' +
                                b.customPath : b.tiDomain && b.tiId && (a = b.tiDomain + '/resp/api/get/' + b.tiId + '?url=' + encodeURIComponent(c.location.href)
                                + '&v=5');
                            if (b.option) for (let d in b.option) a += '&' + d + '=' + encodeURIComponent(b.option[d]);
                            return a
                        };
                        if (-1 ===
                            d.cookie.indexOf('wt_r=1')) {
                            const e = d.getElementsByTagName(a)[0];
                            a = d.createElement(a);
                            a.async = !0;
                            a.onload = function () {
                                if ('undefined' !== typeof c.wt_r && !isNaN(c.wt_r)) {
                                    const b = new Date, a = b.getTime() + 1E3 * parseInt(c.wt_r);
                                    b.setTime(a);
                                    d.cookie = 'wt_r=1;path=/;expires=' + b.toUTCString()
                                }
                            };
                            a.onerror = function () {
                                'undefined' !== typeof c.wt_mcp_hide &&
                                'function' === typeof c.wt_mcp_hide.show && (c.wt_mcp_hide.show(), c.wt_mcp_hide.show = function () {
                                })
                            };
                            a.src = '//' + g(f);
                            e.parentNode.insertBefore(a, e)
                        }
                    })(window, document, 'script', _tiConfig);
                    window.wts = window.wts || [];
                    window.wts.push(['_ps', 64, '<?= $block::PS_VERSION ?>']);
                    <?php
                    /********************************
                     * END TI
                     ********************************/
                    endif ?>

                    if (config.gtm.enable === '1') {
                        gtmCreateProductArray()
                        window[config.gtm.datalayer] = window[config.gtm.datalayer] || [];
                        window[config.gtm.datalayer].push({
                            event: 'mapp.load',
                            mapp: JSON.parse(JSON.stringify(window._ti))
                        });
                    }
                },
                error: function (xhr, status, errorThrown) {
                }
            });

            <?php
            /**********************************************
             * Events
             *********************************************/
            ?>

            const mappAddToCart = (data) => {
                const dataLayerBackup = JSON.stringify(window._ti);
                handleAddProductKeys(data.productAddDataLayer);
                calculatePrices();
                window._ti.shoppingCartStatus = 'add';
                window._ti.productStatus = 'add';
                if (document.cookie.indexOf('mapp_debug') !== -1) {
                    console.log('Mapp Intelligence Add-To-Cart eventname:', data.addToCartEventName);
                    console.log('Mapp Intelligence Add-To-Cart datalayer:', JSON.parse(JSON.stringify(window._ti)));
                }
                if (data.config.tiEnable === '1') {
                    window.dataLayer.push({
                        event: data.addToCartEventName,
                        addToCartMapp: JSON.parse(JSON.stringify(data.productAddToCartMapp))
                    });
                    if (document.cookie.indexOf('mapp_debug') !== -1) {
                        console.log('Mapp Intelligence Add-To-Cart datalayer:', JSON.parse(JSON.stringify(window.dataLayer)));
                    }
                    window.wts.push(['linkId', data.addToCartEventName]);
                    window.wts.push(['send', 'pageupdate', true]);
                }

                gtmCreateProductArray()
                window[data.config.gtm.datalayer] = window[data.config.gtm.datalayer] || [];
                window[data.config.gtm.datalayer].push(function () {
                    this.reset();
                });
                <?php if ($block->getConfig()["gtm"]["triggerBasket"] === "mapp.load"): ?>
                window.wtSmart.action.data.add('<?= $block->getConfig()["gtm"]["event"]?>');
                <?php endif ?>
                window[data.config.gtm.datalayer].push({
                    event: '<?= $block->getConfig()['gtm']['triggerBasket']?>',
                    mapp: {gtmProductArray: JSON.parse(JSON.stringify(window._ti.gtmProductArray))}
                });
                setTimeout(function () {
                    restoreDataLayer(JSON.parse(dataLayerBackup));
                    window.wts.push(['linkId', 'false']);
                }, 500);
            }
            const mappRemoveFromCart = (data) => {
                const dataLayerBackup = JSON.stringify(window._ti);
                handleAddProductKeys(data.productAddDataLayer);
                calculatePrices();
                if (document.cookie.indexOf('mapp_debug') !== -1) {
                    console.log('Mapp Intelligence Remove - From - Cart eventname:', data.removeFromCartEventName);
                    console.log('Mapp Intelligence Remove - From - Cart datalayer:', JSON.parse(JSON.stringify(window._ti)));
                }
                if (data.config.tiEnable === '1') {
                    window._ti.shoppingCartStatus = 'del';
                    window._ti.productStatus = 'del';
                    window.dataLayer.push({
                        event: data.removeFromCartEventName,
                        removeFromCartMapp: JSON.parse(JSON.stringify(data.productRemoveFromCartMapp))
                    });
                    if (document.cookie.indexOf('mapp_debug') !== -1) {
                        console.log('Mapp Intelligence Remove - From - Cart datalayer:', JSON.parse(JSON.stringify(window.dataLayer)));
                    }
                    window.wts.push(['linkId', data.removeFromCartEventName]);
                    window.wts.push(['send', 'pageupdate', true]);
                    window.wts.push(['st', 'del']);
                }
                setTimeout(function () {
                    restoreDataLayer(JSON.parse(dataLayerBackup));
                    window.wts.push(['linkId', 'false']);
                }, 500);
            }

            <?php // from catalog add to cart widget ?>
            $(document).on('ajax:addToCart', function () {
                $.ajax({
                    url: mappEndpoint + '?add=1',
                    type: 'GET',
                    dataType: 'json',
                    complete: function (response) {
                        const config = response.responseJSON.config;
                        const productAddDataLayer = response.responseJSON.dataLayer;
                        const productAddToCartMapp = response.responseJSON.addToCartMapp;
                        const addToCartEventName = response.responseJSON.eventName;
                        if (productAddDataLayer && addToCartEventName) {
                            mappAddToCart({
                                config: config,
                                addToCartEventName: addToCartEventName,
                                productAddDataLayer: productAddDataLayer,
                                productAddToCartMapp: productAddToCartMapp
                            })
                        }
                    },
                    error: function (xhr, status, errorThrown) {
                    }
                });
            });
            $(document).on('ajax:removeFromCart', () => {
                $.ajax({
                    url: mappEndpoint + '?remove=1',
                    type: 'GET',
                    dataType: 'json',
                    complete: function (response) {
                        const config = response.responseJSON.config;
                        const productAddDataLayer = response.responseJSON.dataLayer;
                        const productRemoveFromCartMapp = response.responseJSON.removeFromCartMapp;
                        const removeFromCartEventName = response.responseJSON.eventNameRemove;
                        if (productRemoveFromCartMapp && removeFromCartEventName) {
                            mappRemoveFromCart({
                                config: config,
                                removeFromCartEventName: removeFromCartEventName,
                                productAddDataLayer: productAddDataLayer,
                                productRemoveFromCartMapp: productRemoveFromCartMapp
                            })
                        }
                    },
                    error: function (xhr, status, errorThrown) {
                    }
                })
            });

            <?php // reloading cart page after addition or deletion ?>
            if (window.mappCartUpdated) {
                if (mappCartUpdated.event === mappCartUpdated.removeFromCartEventName) {
                    mappRemoveFromCart(mappCartUpdated)
                } else if (mappCartUpdated.event === mappCartUpdated.addToCartEventName) {
                    mappAddToCart(mappCartUpdated)
                }
            }
        }
    )
</script>
